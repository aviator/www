var search_data = {"index":{"searchIndex":["aviator","baserequestnotfounderror","compatibility","describer","invalidprovidernameerror","logger","openstack","provider","multipleserviceapiserror","request","apiversionnotdefinederror","endpointtypenotdefinederror","pathnotdefinederror","requestalreadydefinederror","requestbuilder","response","service","accessdetailsnotdefinederror","missingserviceendpointerror","providernotdefinederror","servicenamenotdefinederror","sessiondatanotprovidederror","unknownrequesterror","session","authenticationerror","environmentnotdefinederror","initializationerror","invalidconfigfilepatherror","notauthenticatederror","validatornotdefinederror","hashish","module","string","==()","[]()","[]=()","anonymous?()","authenticate()","authenticated?()","base_url()","body()","body()","body?()","build_service_type_string()","call()","compact_hash()","config()","configure()","const_defined?()","const_get()","define_request()","define_request()","describe_aviator()","describe_provider()","describe_request()","describe_service()","domain_hash()","dump()","dup()","each()","empty?()","extract_base_url_from_keystone_v2_session_data()","extract_base_url_from_keystone_v3_session_data()","get_request_class()","has_key?()","hash()","headers()","headers()","headers?()","http_method()","instance_methods()","keys()","keystone_v2_style_service_info?()","keystone_v2_style_session_data?()","keystone_v3_style_service_info?()","keystone_v3_style_session_data?()","length()","links()","load()","load()","log_file()","merge()","merge!()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","old_const_defined?()","old_const_get()","old_instance_methods()","on_complete()","optional_params()","params()","params_to_querystring()","password_auth_body()","querystring?()","request()","request()","request_classes()","required_params()","scope_hash()","session_data()","session_data?()","to_hash()","to_json()","to_s()","token_auth_body()","url()","url?()","validate()"],"longSearchIndex":["aviator","aviator::baserequestnotfounderror","aviator::compatibility","aviator::describer","aviator::describer::invalidprovidernameerror","aviator::logger","aviator::openstack","aviator::openstack::provider","aviator::openstack::provider::multipleserviceapiserror","aviator::request","aviator::request::apiversionnotdefinederror","aviator::request::endpointtypenotdefinederror","aviator::request::pathnotdefinederror","aviator::requestalreadydefinederror","aviator::requestbuilder","aviator::response","aviator::service","aviator::service::accessdetailsnotdefinederror","aviator::service::missingserviceendpointerror","aviator::service::providernotdefinederror","aviator::service::servicenamenotdefinederror","aviator::service::sessiondatanotprovidederror","aviator::service::unknownrequesterror","aviator::session","aviator::session::authenticationerror","aviator::session::environmentnotdefinederror","aviator::session::initializationerror","aviator::session::invalidconfigfilepatherror","aviator::session::notauthenticatederror","aviator::session::validatornotdefinederror","hashish","module","string","hashish#==()","hashish#[]()","hashish#[]=()","aviator::request#anonymous?()","aviator::session#authenticate()","aviator::session#authenticated?()","aviator#base_url()","aviator#body()","aviator::response#body()","aviator::request#body?()","aviator#build_service_type_string()","aviator::logger#call()","aviator#compact_hash()","aviator::session#config()","aviator::logger::configure()","module#const_defined?()","module#const_get()","aviator#define_request()","aviator::requestbuilder#define_request()","aviator::describer::describe_aviator()","aviator::describer::describe_provider()","aviator::describer::describe_request()","aviator::describer::describe_service()","aviator#domain_hash()","aviator::session#dump()","hashish#dup()","hashish#each()","hashish#empty?()","aviator#extract_base_url_from_keystone_v2_session_data()","aviator#extract_base_url_from_keystone_v3_session_data()","aviator::requestbuilder#get_request_class()","hashish#has_key?()","hashish#hash()","aviator#headers()","aviator::response#headers()","aviator::request#headers?()","aviator#http_method()","module#instance_methods()","hashish#keys()","aviator#keystone_v2_style_service_info?()","aviator#keystone_v2_style_session_data?()","aviator#keystone_v3_style_service_info?()","aviator#keystone_v3_style_session_data?()","hashish#length()","aviator::request#links()","aviator::session::load()","aviator::session#load()","aviator::session#log_file()","hashish#merge()","hashish#merge!()","aviator::baserequestnotfounderror::new()","aviator::describer::invalidprovidernameerror::new()","aviator::logger::new()","aviator::openstack::provider::multipleserviceapiserror::new()","aviator::request::new()","aviator::request::apiversionnotdefinederror::new()","aviator::request::endpointtypenotdefinederror::new()","aviator::request::pathnotdefinederror::new()","aviator::requestalreadydefinederror::new()","aviator::response::new()","aviator::service::new()","aviator::service::accessdetailsnotdefinederror::new()","aviator::service::missingserviceendpointerror::new()","aviator::service::providernotdefinederror::new()","aviator::service::servicenamenotdefinederror::new()","aviator::service::sessiondatanotprovidederror::new()","aviator::service::unknownrequesterror::new()","aviator::session::new()","aviator::session::authenticationerror::new()","aviator::session::environmentnotdefinederror::new()","aviator::session::initializationerror::new()","aviator::session::invalidconfigfilepatherror::new()","aviator::session::notauthenticatederror::new()","aviator::session::validatornotdefinederror::new()","hashish::new()","module#old_const_defined?()","module#old_const_get()","module#old_instance_methods()","aviator::logger#on_complete()","aviator::request#optional_params()","aviator::request#params()","aviator#params_to_querystring()","aviator#password_auth_body()","aviator::request#querystring?()","aviator::service#request()","aviator::session#request()","aviator::service#request_classes()","aviator::request#required_params()","aviator#scope_hash()","aviator::request#session_data()","aviator::request#session_data?()","aviator::response#to_hash()","hashish#to_json()","hashish#to_s()","aviator#token_auth_body()","aviator#url()","aviator::request#url?()","aviator::session#validate()"],"info":[["Aviator","","Aviator.html","","<p>Author &mdash; Mark Maglana (mmaglana@gmail.com)\n<p>Copyright &mdash; Copyright © 2014 Mark Maglana\n<p>License &mdash; Distributed …\n"],["Aviator::BaseRequestNotFoundError","","Aviator/BaseRequestNotFoundError.html","",""],["Aviator::Compatibility","","Aviator/Compatibility.html","",""],["Aviator::Describer","","Aviator/Describer.html","",""],["Aviator::Describer::InvalidProviderNameError","","Aviator/Describer/InvalidProviderNameError.html","",""],["Aviator::Logger","","Aviator/Logger.html","",""],["Aviator::Openstack","","Aviator/Openstack.html","",""],["Aviator::Openstack::Provider","","Aviator/Openstack/Provider.html","","<p><strong>Request Options</strong>\n<p>The following options may be used in combination with each other when\ncalling an OpenStack …\n"],["Aviator::Openstack::Provider::MultipleServiceApisError","","Aviator/Openstack/Provider/MultipleServiceApisError.html","",""],["Aviator::Request","","Aviator/Request.html","",""],["Aviator::Request::ApiVersionNotDefinedError","","Aviator/Request/ApiVersionNotDefinedError.html","",""],["Aviator::Request::EndpointTypeNotDefinedError","","Aviator/Request/EndpointTypeNotDefinedError.html","",""],["Aviator::Request::PathNotDefinedError","","Aviator/Request/PathNotDefinedError.html","",""],["Aviator::RequestAlreadyDefinedError","","Aviator/RequestAlreadyDefinedError.html","",""],["Aviator::RequestBuilder","","Aviator/RequestBuilder.html","",""],["Aviator::Response","","Aviator/Response.html","",""],["Aviator::Service","","Aviator/Service.html","","<p>Manages a service\n"],["Aviator::Service::AccessDetailsNotDefinedError","","Aviator/Service/AccessDetailsNotDefinedError.html","",""],["Aviator::Service::MissingServiceEndpointError","","Aviator/Service/MissingServiceEndpointError.html","",""],["Aviator::Service::ProviderNotDefinedError","","Aviator/Service/ProviderNotDefinedError.html","",""],["Aviator::Service::ServiceNameNotDefinedError","","Aviator/Service/ServiceNameNotDefinedError.html","",""],["Aviator::Service::SessionDataNotProvidedError","","Aviator/Service/SessionDataNotProvidedError.html","",""],["Aviator::Service::UnknownRequestError","","Aviator/Service/UnknownRequestError.html","",""],["Aviator::Session","","Aviator/Session.html","","<p>Manages a provider (e.g. OpenStack) session and serves as the entry point\nfor a consumer class/object. …\n"],["Aviator::Session::AuthenticationError","","Aviator/Session/AuthenticationError.html","",""],["Aviator::Session::EnvironmentNotDefinedError","","Aviator/Session/EnvironmentNotDefinedError.html","",""],["Aviator::Session::InitializationError","","Aviator/Session/InitializationError.html","",""],["Aviator::Session::InvalidConfigFilePathError","","Aviator/Session/InvalidConfigFilePathError.html","",""],["Aviator::Session::NotAuthenticatedError","","Aviator/Session/NotAuthenticatedError.html","",""],["Aviator::Session::ValidatorNotDefinedError","","Aviator/Session/ValidatorNotDefinedError.html","",""],["Hashish","","Hashish.html","","<p>Hash-ish!\n<p>This class is implemented using composition rather than inheritance so that\nwe have control …\n"],["Module","","Module.html","",""],["String","","String.html","",""],["==","Hashish","Hashish.html#method-i-3D-3D","(other_obj)",""],["[]","Hashish","Hashish.html#method-i-5B-5D","(key)",""],["[]=","Hashish","Hashish.html#method-i-5B-5D-3D","(key, value)",""],["anonymous?","Aviator::Request","Aviator/Request.html#method-i-anonymous-3F","()",""],["authenticate","Aviator::Session","Aviator/Session.html#method-i-authenticate","(opts={}, &block)","<p>Authenticates against the backend provider using the auth_service request\nclass declared in the session&#39;s …\n"],["authenticated?","Aviator::Session","Aviator/Session.html#method-i-authenticated-3F","()","<p>Returns true if the session has been authenticated. Note that this relies\non cached response from a previous …\n"],["base_url","Aviator","Aviator.html#method-i-base_url","()",""],["body","Aviator","Aviator.html#method-i-body","()",""],["body","Aviator::Response","Aviator/Response.html#method-i-body","()",""],["body?","Aviator::Request","Aviator/Request.html#method-i-body-3F","()",""],["build_service_type_string","Aviator","Aviator.html#method-i-build_service_type_string","()",""],["call","Aviator::Logger","Aviator/Logger.html#method-i-call","(env)",""],["compact_hash","Aviator","Aviator.html#method-i-compact_hash","(hash, opts = {})","<p>Removes nil elements from hash Adapted from\nstackoverflow.com/a/14773555/402145\n"],["config","Aviator::Session","Aviator/Session.html#method-i-config","()","<p>Returns its configuration.\n"],["configure","Aviator::Logger","Aviator/Logger.html#method-c-configure","(log_file_path)",""],["const_defined?","Module","Module.html#method-i-const_defined-3F","(sym, ignore=nil)",""],["const_get","Module","Module.html#method-i-const_get","(sym, ignore=nil)",""],["define_request","Aviator","Aviator.html#method-i-define_request","(request_name, options={ :inherit => [:request] }, &block)",""],["define_request","Aviator::RequestBuilder","Aviator/RequestBuilder.html#method-i-define_request","(root_namespace, request_name, options, &block)",""],["describe_aviator","Aviator::Describer","Aviator/Describer.html#method-c-describe_aviator","()",""],["describe_provider","Aviator::Describer","Aviator/Describer.html#method-c-describe_provider","(provider_name)",""],["describe_request","Aviator::Describer","Aviator/Describer.html#method-c-describe_request","(provider_name, service_name, api_version, endpoint_type, request_name)",""],["describe_service","Aviator::Describer","Aviator/Describer.html#method-c-describe_service","(provider_name, service_name)",""],["domain_hash","Aviator","Aviator.html#method-i-domain_hash","()",""],["dump","Aviator::Session","Aviator/Session.html#method-i-dump","()","<p>Returns a JSON string of its configuration and auth_data. This string can\nbe streamed or stored and later …\n"],["dup","Hashish","Hashish.html#method-i-dup","()",""],["each","Hashish","Hashish.html#method-i-each","(&block)",""],["empty?","Hashish","Hashish.html#method-i-empty-3F","()",""],["extract_base_url_from_keystone_v2_session_data","Aviator","Aviator.html#method-i-extract_base_url_from_keystone_v2_session_data","()",""],["extract_base_url_from_keystone_v3_session_data","Aviator","Aviator.html#method-i-extract_base_url_from_keystone_v3_session_data","()",""],["get_request_class","Aviator::RequestBuilder","Aviator/RequestBuilder.html#method-i-get_request_class","(root_namespace, request_class_arr)",""],["has_key?","Hashish","Hashish.html#method-i-has_key-3F","(name)",""],["hash","Hashish","Hashish.html#method-i-hash","()",""],["headers","Aviator","Aviator.html#method-i-headers","()",""],["headers","Aviator::Response","Aviator/Response.html#method-i-headers","()",""],["headers?","Aviator::Request","Aviator/Request.html#method-i-headers-3F","()",""],["http_method","Aviator","Aviator.html#method-i-http_method","()",""],["instance_methods","Module","Module.html#method-i-instance_methods","(include_super=true)",""],["keys","Hashish","Hashish.html#method-i-keys","()",""],["keystone_v2_style_service_info?","Aviator","Aviator.html#method-i-keystone_v2_style_service_info-3F","()",""],["keystone_v2_style_session_data?","Aviator","Aviator.html#method-i-keystone_v2_style_session_data-3F","()",""],["keystone_v3_style_service_info?","Aviator","Aviator.html#method-i-keystone_v3_style_service_info-3F","()",""],["keystone_v3_style_session_data?","Aviator","Aviator.html#method-i-keystone_v3_style_session_data-3F","()",""],["length","Hashish","Hashish.html#method-i-length","()",""],["links","Aviator::Request","Aviator/Request.html#method-i-links","()",""],["load","Aviator::Session","Aviator/Session.html#method-c-load","(session_dump, opts={})","<p>Creates a new Session object from a previous session&#39;s dump. See\nSession#dump for more information. …\n"],["load","Aviator::Session","Aviator/Session.html#method-i-load","(session_dump)","<p>Same as Session::load but re-uses the Session instance this method is\ncalled on instead of creating a …\n"],["log_file","Aviator::Session","Aviator/Session.html#method-i-log_file","()","<p>Returns the log file path. May be nil if none was provided during\ninitialization.\n"],["merge","Hashish","Hashish.html#method-i-merge","(other_hash)",""],["merge!","Hashish","Hashish.html#method-i-merge-21","(other_hash)",""],["new","Aviator::BaseRequestNotFoundError","Aviator/BaseRequestNotFoundError.html#method-c-new","(base_hierarchy)",""],["new","Aviator::Describer::InvalidProviderNameError","Aviator/Describer/InvalidProviderNameError.html#method-c-new","(name)",""],["new","Aviator::Logger","Aviator/Logger.html#method-c-new","(app, logger=nil)",""],["new","Aviator::Openstack::Provider::MultipleServiceApisError","Aviator/Openstack/Provider/MultipleServiceApisError.html#method-c-new","(service, entries, request_name)",""],["new","Aviator::Request","Aviator/Request.html#method-c-new","(session_data=nil)",""],["new","Aviator::Request::ApiVersionNotDefinedError","Aviator/Request/ApiVersionNotDefinedError.html#method-c-new","()",""],["new","Aviator::Request::EndpointTypeNotDefinedError","Aviator/Request/EndpointTypeNotDefinedError.html#method-c-new","()",""],["new","Aviator::Request::PathNotDefinedError","Aviator/Request/PathNotDefinedError.html#method-c-new","()",""],["new","Aviator::RequestAlreadyDefinedError","Aviator/RequestAlreadyDefinedError.html#method-c-new","(namespace, request_name)",""],["new","Aviator::Response","Aviator/Response.html#method-c-new","(response, request)",""],["new","Aviator::Service","Aviator/Service.html#method-c-new","(opts={})",""],["new","Aviator::Service::AccessDetailsNotDefinedError","Aviator/Service/AccessDetailsNotDefinedError.html#method-c-new","()",""],["new","Aviator::Service::MissingServiceEndpointError","Aviator/Service/MissingServiceEndpointError.html#method-c-new","(service_name, request_name)",""],["new","Aviator::Service::ProviderNotDefinedError","Aviator/Service/ProviderNotDefinedError.html#method-c-new","()",""],["new","Aviator::Service::ServiceNameNotDefinedError","Aviator/Service/ServiceNameNotDefinedError.html#method-c-new","()",""],["new","Aviator::Service::SessionDataNotProvidedError","Aviator/Service/SessionDataNotProvidedError.html#method-c-new","(service_name, request_name)",""],["new","Aviator::Service::UnknownRequestError","Aviator/Service/UnknownRequestError.html#method-c-new","(request_name, options)",""],["new","Aviator::Session","Aviator/Session.html#method-c-new","(opts={})","<p>Create a new Session instance.\n<p><strong>Initialize with a config file</strong>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Aviator</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Session</span>.<span class=\"ruby-identifier\">new</span>(:<span class=\"ruby-identifier\">config_file</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;path/to/aviator.yml&#39;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","Aviator::Session::AuthenticationError","Aviator/Session/AuthenticationError.html#method-c-new","(last_auth_body)",""],["new","Aviator::Session::EnvironmentNotDefinedError","Aviator/Session/EnvironmentNotDefinedError.html#method-c-new","(path, env)",""],["new","Aviator::Session::InitializationError","Aviator/Session/InitializationError.html#method-c-new","()",""],["new","Aviator::Session::InvalidConfigFilePathError","Aviator/Session/InvalidConfigFilePathError.html#method-c-new","(path)",""],["new","Aviator::Session::NotAuthenticatedError","Aviator/Session/NotAuthenticatedError.html#method-c-new","()",""],["new","Aviator::Session::ValidatorNotDefinedError","Aviator/Session/ValidatorNotDefinedError.html#method-c-new","()",""],["new","Hashish","Hashish.html#method-c-new","(hash={})",""],["old_const_defined?","Module","Module.html#method-i-old_const_defined-3F","(sym, ignore=nil)",""],["old_const_get","Module","Module.html#method-i-old_const_get","(sym, ignore=nil)",""],["old_instance_methods","Module","Module.html#method-i-old_instance_methods","(include_super=true)",""],["on_complete","Aviator::Logger","Aviator/Logger.html#method-i-on_complete","(env)",""],["optional_params","Aviator::Request","Aviator/Request.html#method-i-optional_params","()",""],["params","Aviator::Request","Aviator/Request.html#method-i-params","()",""],["params_to_querystring","Aviator","Aviator.html#method-i-params_to_querystring","(param_names)",""],["password_auth_body","Aviator","Aviator.html#method-i-password_auth_body","()",""],["querystring?","Aviator::Request","Aviator/Request.html#method-i-querystring-3F","()",""],["request","Aviator::Service","Aviator/Service.html#method-i-request","(request_name, options={}, &params)","<p>No longer recommended for public use. Use Aviator::Session#request instead\n"],["request","Aviator::Session","Aviator/Session.html#method-i-request","(service_name, request_name, opts={}, &block)","<p>Calls the given request of the given service. An example call might look\nlike:\n\n<pre>session.request :compute_service, ...</pre>\n"],["request_classes","Aviator::Service","Aviator/Service.html#method-i-request_classes","()",""],["required_params","Aviator::Request","Aviator/Request.html#method-i-required_params","()",""],["scope_hash","Aviator","Aviator.html#method-i-scope_hash","()",""],["session_data","Aviator::Request","Aviator/Request.html#method-i-session_data","()",""],["session_data?","Aviator::Request","Aviator/Request.html#method-i-session_data-3F","()",""],["to_hash","Aviator::Response","Aviator/Response.html#method-i-to_hash","()",""],["to_json","Hashish","Hashish.html#method-i-to_json","(obj)",""],["to_s","Hashish","Hashish.html#method-i-to_s","()",""],["token_auth_body","Aviator","Aviator.html#method-i-token_auth_body","()",""],["url","Aviator","Aviator.html#method-i-url","()",""],["url?","Aviator::Request","Aviator/Request.html#method-i-url-3F","()",""],["validate","Aviator::Session","Aviator/Session.html#method-i-validate","()","<p>Returns true if the session is still valid in the underlying provider. This\nmethod calls the <code>validator</code> …\n"]]}}