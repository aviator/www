var search_data = {"index":{"searchIndex":["aviator","baserequestnotfounderror","cli","main","compatibility","describer","invalidprovidernameerror","dummy","provider","logger","openstack","provider","multipleserviceapiserror","request","apiversionnotdefinederror","endpointtypenotdefinederror","pathnotdefinederror","requestalreadydefinederror","requestbuilder","response","service","accessdetailsnotdefinederror","missingserviceendpointerror","providernotdefinederror","servicenamenotdefinederror","sessiondatanotprovidederror","unknownrequesterror","session","authenticationerror","environmentnotdefinederror","initializationerror","invalidconfigfilepatherror","notauthenticatederror","validatornotdefinederror","test","environment","progressreporter","requesthelper","specreporter","coveralls","hashish","minitest","module","object","simplecov","formatter","string","==()","[]()","[]=()","admin_bootstrap_session_data()","admin_session()","admin_session_data()","anonymous?()","authenticate()","authenticated?()","base_url()","body()","body()","body()","body?()","build_request()","build_service_type_string()","builder()","call()","cassette_name()","compact_hash()","config()","config()","configure()","const_defined?()","const_get()","create_request()","create_volume()","define_request()","define_request()","delete_session_data()","describe()","describe_aviator()","describe_provider()","describe_request()","describe_service()","do_auth_request()","domain_hash()","dump()","dup()","each()","empty?()","extract_base_url_from_keystone_v2_session_data()","extract_base_url_from_keystone_v3_session_data()","find_request()","flavor_id()","get_name()","get_request_class()","get_request_class()","get_session_data()","has_key?()","hash()","headers()","headers()","headers?()","helper()","host_name()","http_method()","http_method()","init!()","instance_methods()","keys()","keystone_v2_style_service_info?()","keystone_v2_style_session_data?()","keystone_v3_style_service_info?()","keystone_v3_style_session_data?()","klass()","length()","links()","load()","load()","load_request()","load_service()","log_file()","member_session()","merge()","merge!()","method_missing()","method_missing()","modyul()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_session_data()","old_const_defined?()","old_const_get()","old_instance_methods()","on_complete()","optional_params()","params()","params_to_querystring()","password_auth_body()","provider_names()","querystring?()","request()","request()","request_classes()","request_classes()","request_file_paths()","request_path()","required_params()","root_dir()","running_in_ci()","scope_hash()","server()","service()","service_names()","session()","session_data()","session_data?()","stub_body()","stub_headers()","stub_http()","to_hash()","to_json()","to_s()","token_auth_body()","url()","url()","url?()","valid_config()","valid_config_path()","valid_env()","validate()","validate_attr()","validate_response()","contributors","gemfile","gemfile.lock","guardfile","license","readme","rakefile","aviator.gemspec","application.css","application.js","index.html","environment.yml.example","environment.yml.travis-ci","aviator.log","vcr.log"],"longSearchIndex":["aviator","aviator::baserequestnotfounderror","aviator::cli","aviator::cli::main","aviator::compatibility","aviator::describer","aviator::describer::invalidprovidernameerror","aviator::dummy","aviator::dummy::provider","aviator::logger","aviator::openstack","aviator::openstack::provider","aviator::openstack::provider::multipleserviceapiserror","aviator::request","aviator::request::apiversionnotdefinederror","aviator::request::endpointtypenotdefinederror","aviator::request::pathnotdefinederror","aviator::requestalreadydefinederror","aviator::requestbuilder","aviator::response","aviator::service","aviator::service::accessdetailsnotdefinederror","aviator::service::missingserviceendpointerror","aviator::service::providernotdefinederror","aviator::service::servicenamenotdefinederror","aviator::service::sessiondatanotprovidederror","aviator::service::unknownrequesterror","aviator::session","aviator::session::authenticationerror","aviator::session::environmentnotdefinederror","aviator::session::initializationerror","aviator::session::invalidconfigfilepatherror","aviator::session::notauthenticatederror","aviator::session::validatornotdefinederror","aviator::test","aviator::test::environment","aviator::test::progressreporter","aviator::test::requesthelper","aviator::test::specreporter","coveralls","hashish","minitest","module","object","simplecov","simplecov::formatter","string","hashish#==()","hashish#[]()","hashish#[]=()","aviator::test::requesthelper#admin_bootstrap_session_data()","aviator::test#admin_session()","aviator::test::requesthelper#admin_session_data()","aviator::request#anonymous?()","aviator::session#authenticate()","aviator::session#authenticated?()","aviator#base_url()","aviator#body()","aviator::response#body()","aviator::test#body()","aviator::request#body?()","aviator::test#build_request()","aviator#build_service_type_string()","aviator::test#builder()","aviator::logger#call()","aviator::test#cassette_name()","aviator#compact_hash()","aviator::session#config()","aviator::test#config()","aviator::logger::configure()","module#const_defined?()","module#const_get()","aviator::test#create_request()","aviator::test#create_volume()","aviator#define_request()","aviator::requestbuilder#define_request()","aviator::test#delete_session_data()","aviator::cli::main#describe()","aviator::describer::describe_aviator()","aviator::describer::describe_provider()","aviator::describer::describe_request()","aviator::describer::describe_service()","aviator::test#do_auth_request()","aviator#domain_hash()","aviator::session#dump()","hashish#dup()","hashish#each()","hashish#empty?()","aviator#extract_base_url_from_keystone_v2_session_data()","aviator#extract_base_url_from_keystone_v3_session_data()","aviator::dummy::provider#find_request()","aviator::test#flavor_id()","aviator::test#get_name()","aviator::requestbuilder#get_request_class()","aviator::test::requesthelper#get_request_class()","aviator::test#get_session_data()","hashish#has_key?()","hashish#hash()","aviator#headers()","aviator::response#headers()","aviator::request#headers?()","aviator::test#helper()","aviator::test#host_name()","aviator#http_method()","aviator::test#http_method()","aviator::test::environment#init!()","module#instance_methods()","hashish#keys()","aviator#keystone_v2_style_service_info?()","aviator#keystone_v2_style_session_data?()","aviator#keystone_v3_style_service_info?()","aviator#keystone_v3_style_session_data?()","aviator::test#klass()","hashish#length()","aviator::request#links()","aviator::session#load()","aviator::session::load()","aviator::test::requesthelper#load_request()","aviator::test#load_service()","aviator::session#log_file()","aviator::test#member_session()","hashish#merge()","hashish#merge!()","aviator::session#method_missing()","aviator::test::environment#method_missing()","aviator::test#modyul()","aviator::baserequestnotfounderror::new()","aviator::describer::invalidprovidernameerror::new()","aviator::logger::new()","aviator::openstack::provider::multipleserviceapiserror::new()","aviator::request::new()","aviator::request::apiversionnotdefinederror::new()","aviator::request::endpointtypenotdefinederror::new()","aviator::request::pathnotdefinederror::new()","aviator::requestalreadydefinederror::new()","aviator::response::new()","aviator::service::new()","aviator::service::accessdetailsnotdefinederror::new()","aviator::service::missingserviceendpointerror::new()","aviator::service::providernotdefinederror::new()","aviator::service::servicenamenotdefinederror::new()","aviator::service::sessiondatanotprovidederror::new()","aviator::service::unknownrequesterror::new()","aviator::session::new()","aviator::session::authenticationerror::new()","aviator::session::environmentnotdefinederror::new()","aviator::session::initializationerror::new()","aviator::session::invalidconfigfilepatherror::new()","aviator::session::notauthenticatederror::new()","aviator::session::validatornotdefinederror::new()","hashish::new()","aviator::test#new_session_data()","module#old_const_defined?()","module#old_const_get()","module#old_instance_methods()","aviator::logger#on_complete()","aviator::request#optional_params()","aviator::request#params()","aviator#params_to_querystring()","aviator#password_auth_body()","aviator::test#provider_names()","aviator::request#querystring?()","aviator::service#request()","aviator::session#request()","aviator::service#request_classes()","aviator::test#request_classes()","aviator::dummy::provider#request_file_paths()","aviator::test::requesthelper#request_path()","aviator::request#required_params()","aviator::dummy::provider#root_dir()","object#running_in_ci()","aviator#scope_hash()","aviator::test#server()","aviator::test#service()","aviator::test#service_names()","aviator::test#session()","aviator::request#session_data()","aviator::request#session_data?()","object#stub_body()","object#stub_headers()","object#stub_http()","aviator::response#to_hash()","hashish#to_json()","hashish#to_s()","aviator#token_auth_body()","aviator#url()","aviator::test#url()","aviator::request#url?()","object#valid_config()","object#valid_config_path()","object#valid_env()","aviator::session#validate()","aviator::test::validate_attr()","aviator::test::validate_response()","","","","","","","","","","","","","","",""],"info":[["Aviator","","Aviator.html","","<p>Original work by Stephen Paul Suarez\ngithub.com/musashi-dev/aviator/blob/develop/lib/aviator/openstack/identity/v3/public/create_token.rb\n…\n"],["Aviator::BaseRequestNotFoundError","","Aviator/BaseRequestNotFoundError.html","",""],["Aviator::CLI","","Aviator/CLI.html","",""],["Aviator::CLI::Main","","Aviator/CLI/Main.html","",""],["Aviator::Compatibility","","Aviator/Compatibility.html","",""],["Aviator::Describer","","Aviator/Describer.html","",""],["Aviator::Describer::InvalidProviderNameError","","Aviator/Describer/InvalidProviderNameError.html","",""],["Aviator::Dummy","","Aviator/Dummy.html","","<p>Dummy Provider\n<p>We use this dummy provider to decouple Aviator core tests from any specific\nAviator application. …\n"],["Aviator::Dummy::Provider","","Aviator/Dummy/Provider.html","",""],["Aviator::Logger","","Aviator/Logger.html","",""],["Aviator::Openstack","","Aviator/Openstack.html","",""],["Aviator::Openstack::Provider","","Aviator/Openstack/Provider.html","","<p>Manages a provider (e.g. OpenStack) session.\n<p>Author &mdash; Mark Maglana (mmaglana@gmail.com)\n<p>Copyright &mdash; Copyright …\n"],["Aviator::Openstack::Provider::MultipleServiceApisError","","Aviator/Openstack/Provider/MultipleServiceApisError.html","",""],["Aviator::Request","","Aviator/Request.html","",""],["Aviator::Request::ApiVersionNotDefinedError","","Aviator/Request/ApiVersionNotDefinedError.html","",""],["Aviator::Request::EndpointTypeNotDefinedError","","Aviator/Request/EndpointTypeNotDefinedError.html","",""],["Aviator::Request::PathNotDefinedError","","Aviator/Request/PathNotDefinedError.html","",""],["Aviator::RequestAlreadyDefinedError","","Aviator/RequestAlreadyDefinedError.html","",""],["Aviator::RequestBuilder","","Aviator/RequestBuilder.html","",""],["Aviator::Response","","Aviator/Response.html","",""],["Aviator::Service","","Aviator/Service.html","",""],["Aviator::Service::AccessDetailsNotDefinedError","","Aviator/Service/AccessDetailsNotDefinedError.html","",""],["Aviator::Service::MissingServiceEndpointError","","Aviator/Service/MissingServiceEndpointError.html","",""],["Aviator::Service::ProviderNotDefinedError","","Aviator/Service/ProviderNotDefinedError.html","",""],["Aviator::Service::ServiceNameNotDefinedError","","Aviator/Service/ServiceNameNotDefinedError.html","",""],["Aviator::Service::SessionDataNotProvidedError","","Aviator/Service/SessionDataNotProvidedError.html","",""],["Aviator::Service::UnknownRequestError","","Aviator/Service/UnknownRequestError.html","",""],["Aviator::Session","","Aviator/Session.html","","<p>Manages a provider (e.g. OpenStack) session.\n<p>Author &mdash; Mark Maglana (mmaglana@gmail.com)\n<p>Copyright &mdash; Copyright …\n"],["Aviator::Session::AuthenticationError","","Aviator/Session/AuthenticationError.html","",""],["Aviator::Session::EnvironmentNotDefinedError","","Aviator/Session/EnvironmentNotDefinedError.html","",""],["Aviator::Session::InitializationError","","Aviator/Session/InitializationError.html","",""],["Aviator::Session::InvalidConfigFilePathError","","Aviator/Session/InvalidConfigFilePathError.html","",""],["Aviator::Session::NotAuthenticatedError","","Aviator/Session/NotAuthenticatedError.html","",""],["Aviator::Session::ValidatorNotDefinedError","","Aviator/Session/ValidatorNotDefinedError.html","",""],["Aviator::Test","","Aviator/Test.html","",""],["Aviator::Test::Environment","","Aviator/Test/Environment.html","",""],["Aviator::Test::ProgressReporter","","Aviator/Test/ProgressReporter.html","",""],["Aviator::Test::RequestHelper","","Aviator/Test/RequestHelper.html","",""],["Aviator::Test::SpecReporter","","Aviator/Test/SpecReporter.html","",""],["Coveralls","","Coveralls.html","",""],["Hashish","","Hashish.html","","<p>Hash-ish!\n<p>This class is implemented using composition rather than inheritance so that\nwe have control …\n"],["MiniTest","","MiniTest.html","",""],["Module","","Module.html","",""],["Object","","Object.html","",""],["SimpleCov","","SimpleCov.html","",""],["SimpleCov::Formatter","","SimpleCov/Formatter.html","",""],["String","","String.html","",""],["==","Hashish","Hashish.html#method-i-3D-3D","(other_obj)",""],["[]","Hashish","Hashish.html#method-i-5B-5D","(key)",""],["[]=","Hashish","Hashish.html#method-i-5B-5D-3D","(key, value)",""],["admin_bootstrap_session_data","Aviator::Test::RequestHelper","Aviator/Test/RequestHelper.html#method-i-admin_bootstrap_session_data","(api_version=nil)",""],["admin_session","Aviator::Test","Aviator/Test.html#method-i-admin_session","()",""],["admin_session_data","Aviator::Test::RequestHelper","Aviator/Test/RequestHelper.html#method-i-admin_session_data","()",""],["anonymous?","Aviator::Request","Aviator/Request.html#method-i-anonymous-3F","()",""],["authenticate","Aviator::Session","Aviator/Session.html#method-i-authenticate","(opts={}, &block)","<p>Authenticates against the auth_service request class declared in the\nsession&#39;s configuration during …\n"],["authenticated?","Aviator::Session","Aviator/Session.html#method-i-authenticated-3F","()","<p>Returns true if the session has been authenticated.\n"],["base_url","Aviator","Aviator.html#method-i-base_url","()",""],["body","Aviator","Aviator.html#method-i-body","()",""],["body","Aviator::Response","Aviator/Response.html#method-i-body","()",""],["body","Aviator::Test","Aviator/Test.html#method-i-body","()",""],["body?","Aviator::Request","Aviator/Request.html#method-i-body-3F","()",""],["build_request","Aviator::Test","Aviator/Test.html#method-i-build_request","(provider_name, service_name, request_name, &block)",""],["build_service_type_string","Aviator","Aviator.html#method-i-build_service_type_string","()",""],["builder","Aviator::Test","Aviator/Test.html#method-i-builder","()",""],["call","Aviator::Logger","Aviator/Logger.html#method-i-call","(env)",""],["cassette_name","Aviator::Test","Aviator/Test.html#method-i-cassette_name","()",""],["compact_hash","Aviator","Aviator.html#method-i-compact_hash","(hash, opts = {})","<p>Removes nil elements from hash Adapted from\nstackoverflow.com/a/14773555/402145\n"],["config","Aviator::Session","Aviator/Session.html#method-i-config","()","<p>Returns its configuration.\n"],["config","Aviator::Test","Aviator/Test.html#method-i-config","()",""],["configure","Aviator::Logger","Aviator/Logger.html#method-c-configure","(log_file_path)",""],["const_defined?","Module","Module.html#method-i-const_defined-3F","(sym, ignore=nil)",""],["const_get","Module","Module.html#method-i-const_get","(sym, ignore=nil)",""],["create_request","Aviator::Test","Aviator/Test.html#method-i-create_request","(session_data=get_session_data, &block)",""],["create_volume","Aviator::Test","Aviator/Test.html#method-i-create_volume","()",""],["define_request","Aviator","Aviator.html#method-i-define_request","(request_name, options={ :inherit => [:request] }, &block)",""],["define_request","Aviator::RequestBuilder","Aviator/RequestBuilder.html#method-i-define_request","(root_namespace, request_name, options, &block)",""],["delete_session_data","Aviator::Test","Aviator/Test.html#method-i-delete_session_data","()",""],["describe","Aviator::CLI::Main","Aviator/CLI/Main.html#method-i-describe","(provider=nil, service=nil, api_version=nil, endpoint_type=nil, request=nil)",""],["describe_aviator","Aviator::Describer","Aviator/Describer.html#method-c-describe_aviator","()",""],["describe_provider","Aviator::Describer","Aviator/Describer.html#method-c-describe_provider","(provider_name)",""],["describe_request","Aviator::Describer","Aviator/Describer.html#method-c-describe_request","(provider_name, service_name, api_version, endpoint_type, request_name)",""],["describe_service","Aviator::Describer","Aviator/Describer.html#method-c-describe_service","(provider_name, service_name)",""],["do_auth_request","Aviator::Test","Aviator/Test.html#method-i-do_auth_request","()",""],["domain_hash","Aviator","Aviator.html#method-i-domain_hash","()",""],["dump","Aviator::Session","Aviator/Session.html#method-i-dump","()","<p>Returns a JSON string of its configuration and auth_data. This string can\nbe streamed or stored and later …\n"],["dup","Hashish","Hashish.html#method-i-dup","()",""],["each","Hashish","Hashish.html#method-i-each","(&block)",""],["empty?","Hashish","Hashish.html#method-i-empty-3F","()",""],["extract_base_url_from_keystone_v2_session_data","Aviator","Aviator.html#method-i-extract_base_url_from_keystone_v2_session_data","()",""],["extract_base_url_from_keystone_v3_session_data","Aviator","Aviator.html#method-i-extract_base_url_from_keystone_v3_session_data","()",""],["find_request","Aviator::Dummy::Provider","Aviator/Dummy/Provider.html#method-i-find_request","(service, name, session_data, options)",""],["flavor_id","Aviator::Test","Aviator/Test.html#method-i-flavor_id","()",""],["get_name","Aviator::Test","Aviator/Test.html#method-i-get_name","()",""],["get_request_class","Aviator::RequestBuilder","Aviator/RequestBuilder.html#method-i-get_request_class","(root_namespace, request_class_arr)",""],["get_request_class","Aviator::Test::RequestHelper","Aviator/Test/RequestHelper.html#method-i-get_request_class","(parent, *path)",""],["get_session_data","Aviator::Test","Aviator/Test.html#method-i-get_session_data","(keystone_api_version=:v2)",""],["has_key?","Hashish","Hashish.html#method-i-has_key-3F","(name)",""],["hash","Hashish","Hashish.html#method-i-hash","()",""],["headers","Aviator","Aviator.html#method-i-headers","()",""],["headers","Aviator::Response","Aviator/Response.html#method-i-headers","()",""],["headers?","Aviator::Request","Aviator/Request.html#method-i-headers-3F","()",""],["helper","Aviator::Test","Aviator/Test.html#method-i-helper","()",""],["host_name","Aviator::Test","Aviator/Test.html#method-i-host_name","()",""],["http_method","Aviator","Aviator.html#method-i-http_method","()",""],["http_method","Aviator::Test","Aviator/Test.html#method-i-http_method","()",""],["init!","Aviator::Test::Environment","Aviator/Test/Environment.html#method-i-init-21","()",""],["instance_methods","Module","Module.html#method-i-instance_methods","(include_super=true)",""],["keys","Hashish","Hashish.html#method-i-keys","()",""],["keystone_v2_style_service_info?","Aviator","Aviator.html#method-i-keystone_v2_style_service_info-3F","()",""],["keystone_v2_style_session_data?","Aviator","Aviator.html#method-i-keystone_v2_style_session_data-3F","()",""],["keystone_v3_style_service_info?","Aviator","Aviator.html#method-i-keystone_v3_style_service_info-3F","()",""],["keystone_v3_style_session_data?","Aviator","Aviator.html#method-i-keystone_v3_style_session_data-3F","()",""],["klass","Aviator::Test","Aviator/Test.html#method-i-klass","()",""],["length","Hashish","Hashish.html#method-i-length","()",""],["links","Aviator::Request","Aviator/Request.html#method-i-links","()",""],["load","Aviator::Session","Aviator/Session.html#method-i-load","(session_dump)","<p>Same as Session::load but re-uses the Session instance this method is\ncalled on instead of creating a …\n"],["load","Aviator::Session","Aviator/Session.html#method-c-load","(session_dump, opts={})","<p>Creates a new Session object from a previous session&#39;s dump. See\nSession#dump for more information. …\n"],["load_request","Aviator::Test::RequestHelper","Aviator/Test/RequestHelper.html#method-i-load_request","(*path)",""],["load_service","Aviator::Test","Aviator/Test.html#method-i-load_service","(service=nil, default_session_data=nil)",""],["log_file","Aviator::Session","Aviator/Session.html#method-i-log_file","()","<p>Returns the log file path. May be nil if none was provided during\ninitialization.\n"],["member_session","Aviator::Test","Aviator/Test.html#method-i-member_session","()",""],["merge","Hashish","Hashish.html#method-i-merge","(other_hash)",""],["merge!","Hashish","Hashish.html#method-i-merge-21","(other_hash)",""],["method_missing","Aviator::Session","Aviator/Session.html#method-i-method_missing","(name, *args, &block)",""],["method_missing","Aviator::Test::Environment","Aviator/Test/Environment.html#method-i-method_missing","(name, *args)",""],["modyul","Aviator::Test","Aviator/Test.html#method-i-modyul","()",""],["new","Aviator::BaseRequestNotFoundError","Aviator/BaseRequestNotFoundError.html#method-c-new","(base_hierarchy)",""],["new","Aviator::Describer::InvalidProviderNameError","Aviator/Describer/InvalidProviderNameError.html#method-c-new","(name)",""],["new","Aviator::Logger","Aviator/Logger.html#method-c-new","(app, logger=nil)",""],["new","Aviator::Openstack::Provider::MultipleServiceApisError","Aviator/Openstack/Provider/MultipleServiceApisError.html#method-c-new","(service, entries, request_name)",""],["new","Aviator::Request","Aviator/Request.html#method-c-new","(session_data=nil)",""],["new","Aviator::Request::ApiVersionNotDefinedError","Aviator/Request/ApiVersionNotDefinedError.html#method-c-new","()",""],["new","Aviator::Request::EndpointTypeNotDefinedError","Aviator/Request/EndpointTypeNotDefinedError.html#method-c-new","()",""],["new","Aviator::Request::PathNotDefinedError","Aviator/Request/PathNotDefinedError.html#method-c-new","()",""],["new","Aviator::RequestAlreadyDefinedError","Aviator/RequestAlreadyDefinedError.html#method-c-new","(namespace, request_name)",""],["new","Aviator::Response","Aviator/Response.html#method-c-new","(response, request)",""],["new","Aviator::Service","Aviator/Service.html#method-c-new","(opts={})",""],["new","Aviator::Service::AccessDetailsNotDefinedError","Aviator/Service/AccessDetailsNotDefinedError.html#method-c-new","()",""],["new","Aviator::Service::MissingServiceEndpointError","Aviator/Service/MissingServiceEndpointError.html#method-c-new","(service_name, request_name)",""],["new","Aviator::Service::ProviderNotDefinedError","Aviator/Service/ProviderNotDefinedError.html#method-c-new","()",""],["new","Aviator::Service::ServiceNameNotDefinedError","Aviator/Service/ServiceNameNotDefinedError.html#method-c-new","()",""],["new","Aviator::Service::SessionDataNotProvidedError","Aviator/Service/SessionDataNotProvidedError.html#method-c-new","(service_name, request_name)",""],["new","Aviator::Service::UnknownRequestError","Aviator/Service/UnknownRequestError.html#method-c-new","(request_name, options)",""],["new","Aviator::Session","Aviator/Session.html#method-c-new","(opts={})","<p>Create a new Session instance with options provided in <code>opts</code>\nwhich can have many forms discussed below. …\n"],["new","Aviator::Session::AuthenticationError","Aviator/Session/AuthenticationError.html#method-c-new","(last_auth_body)",""],["new","Aviator::Session::EnvironmentNotDefinedError","Aviator/Session/EnvironmentNotDefinedError.html#method-c-new","(path, env)",""],["new","Aviator::Session::InitializationError","Aviator/Session/InitializationError.html#method-c-new","()",""],["new","Aviator::Session::InvalidConfigFilePathError","Aviator/Session/InvalidConfigFilePathError.html#method-c-new","(path)",""],["new","Aviator::Session::NotAuthenticatedError","Aviator/Session/NotAuthenticatedError.html#method-c-new","()",""],["new","Aviator::Session::ValidatorNotDefinedError","Aviator/Session/ValidatorNotDefinedError.html#method-c-new","()",""],["new","Hashish","Hashish.html#method-c-new","(hash={})",""],["new_session_data","Aviator::Test","Aviator/Test.html#method-i-new_session_data","()",""],["old_const_defined?","Module","Module.html#method-i-old_const_defined-3F","(sym, ignore=nil)",""],["old_const_get","Module","Module.html#method-i-old_const_get","(sym, ignore=nil)",""],["old_instance_methods","Module","Module.html#method-i-old_instance_methods","(include_super=true)",""],["on_complete","Aviator::Logger","Aviator/Logger.html#method-i-on_complete","(env)",""],["optional_params","Aviator::Request","Aviator/Request.html#method-i-optional_params","()",""],["params","Aviator::Request","Aviator/Request.html#method-i-params","()",""],["params_to_querystring","Aviator","Aviator.html#method-i-params_to_querystring","(param_names)",""],["password_auth_body","Aviator","Aviator.html#method-i-password_auth_body","()",""],["provider_names","Aviator::Test","Aviator/Test.html#method-i-provider_names","()",""],["querystring?","Aviator::Request","Aviator/Request.html#method-i-querystring-3F","()",""],["request","Aviator::Service","Aviator/Service.html#method-i-request","(request_name, options={}, &params)",""],["request","Aviator::Session","Aviator/Session.html#method-i-request","(service_name, request_name, opts={}, &params)","<p>Calls the given request of the given service. An example call might look\nlike:\n\n<pre>session.request :compute_service, ...</pre>\n"],["request_classes","Aviator::Service","Aviator/Service.html#method-i-request_classes","()",""],["request_classes","Aviator::Test","Aviator/Test.html#method-i-request_classes","(provider_name, service_name)",""],["request_file_paths","Aviator::Dummy::Provider","Aviator/Dummy/Provider.html#method-i-request_file_paths","(service)",""],["request_path","Aviator::Test::RequestHelper","Aviator/Test/RequestHelper.html#method-i-request_path","(*path)",""],["required_params","Aviator::Request","Aviator/Request.html#method-i-required_params","()",""],["root_dir","Aviator::Dummy::Provider","Aviator/Dummy/Provider.html#method-i-root_dir","()",""],["running_in_ci","Object","Object.html#method-i-running_in_ci","()","<p>May be used by other test helpers under test/support\n"],["scope_hash","Aviator","Aviator.html#method-i-scope_hash","()",""],["server","Aviator::Test","Aviator/Test.html#method-i-server","()",""],["service","Aviator::Test","Aviator/Test.html#method-i-service","(default_session_data=nil)",""],["service_names","Aviator::Test","Aviator/Test.html#method-i-service_names","(provider_name)",""],["session","Aviator::Test","Aviator/Test.html#method-i-session","(api_version=:v2)",""],["session_data","Aviator::Request","Aviator/Request.html#method-i-session_data","()",""],["session_data?","Aviator::Request","Aviator/Request.html#method-i-session_data-3F","()",""],["stub_body","Object","Object.html#method-i-stub_body","()","<p>Methods/attributes shared across tests\n"],["stub_headers","Object","Object.html#method-i-stub_headers","()",""],["stub_http","Object","Object.html#method-i-stub_http","()",""],["to_hash","Aviator::Response","Aviator/Response.html#method-i-to_hash","()",""],["to_json","Hashish","Hashish.html#method-i-to_json","(obj)",""],["to_s","Hashish","Hashish.html#method-i-to_s","()",""],["token_auth_body","Aviator","Aviator.html#method-i-token_auth_body","()",""],["url","Aviator","Aviator.html#method-i-url","()",""],["url","Aviator::Test","Aviator/Test.html#method-i-url","()",""],["url?","Aviator::Request","Aviator/Request.html#method-i-url-3F","()",""],["valid_config","Object","Object.html#method-i-valid_config","()",""],["valid_config_path","Object","Object.html#method-i-valid_config_path","()",""],["valid_env","Object","Object.html#method-i-valid_env","()",""],["validate","Aviator::Session","Aviator/Session.html#method-i-validate","()","<p>Returns true if the session is still valid in the underlying provider. This\nmethod does this by calling …\n"],["validate_attr","Aviator::Test","Aviator/Test.html#method-c-validate_attr","(name, extra_desc=nil, &block)",""],["validate_response","Aviator::Test","Aviator/Test.html#method-c-validate_response","(scenario, &block)",""],["CONTRIBUTORS","","CONTRIBUTORS_txt.html","","<p>Adrian Peterson Co &lt;adrianpco@gmail.com&gt; Alfonso Juan Dillera\n&lt;aj.dillera@gmail.com&gt; Alvin …\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Specify your gem&#39;s dependencies in aviator.gemspec gemspec\n<p># Putting …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  aviator (0.1.0)\n    faraday (~&gt; 0.8, &gt;= 0.8.8)\n    terminal-table (~&gt; 1.4, &gt;= ...</pre>\n"],["Guardfile","","Guardfile.html","","<p>guard &#39;minitest&#39; do\n\n<pre>watch(%r|^lib/aviator\\.rb|)            { &quot;test&quot; }\nwatch(%r|^test/test_helper\\.rb|) ...</pre>\n"],["LICENSE","","LICENSE_txt.html","","<p>Copyright © 2014 Mark Maglana\n<p>MIT License\n<p>Permission is hereby granted, free of charge, to any person …\n"],["README","","README_md.html","","<p><img\nsrc=\"https://raw.github.com/aviator/www/gh-pages/images/logo-small.png\">\n&lt;br/&gt;An\nelegantly ...\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require “rake/testtask”\n<p>Rake::TestTask.new(:test) do |t| …\n"],["aviator.gemspec","","aviator_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"],["application.css","","coverage/assets/0_7_1/application_css.html","","\n<pre>  -----------------------------------------------------------------------\n\nBlueprint CSS Framework 0.9 ...</pre>\n"],["application.js","","coverage/assets/0_7_1/application_js.html","","\n<pre>!\n jQuery JavaScript Library v1.6.2\n http://jquery.com/\n\n Copyright 2011, John Resig\n Dual licensed under ...</pre>\n"],["index.html","","coverage/index_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html xmlns=&#39;www.w3.org/1999/xhtml&#39;&gt;\n\n<pre>&lt;head&gt;\n  &lt;title&gt;Code coverage ...</pre>\n"],["environment.yml.example","","test/environment_yml_example.html","","<p>common: &amp;common\n\n<pre>provider:      openstack\nauth_service:\n  name:        identity\n  host_uri:    http://devstack:5000 ...</pre>\n"],["environment.yml.travis-ci","","test/environment_yml_travis-ci.html","","<p>common: &amp;common\n\n<pre>provider:      openstack\nauth_service:\n  name:        identity\n  host_uri:    http://www.openstack.com:5000 ...</pre>\n"],["aviator.log","","tmp/aviator_log.html","","<p># Logfile created on 2014-12-09 21:59:41 -0800 by logger.rb/44203 I,\n[2014-12-09T21:59:41.093325 #12066] …\n"],["vcr.log","","tmp/vcr_log.html","","<p>Cassette: &#39;core/cli/describer/c_describe_aviator/shows a list of providers&#39; &mdash; Initialized with …\n"]]}}